}
filter_genre(c("Country","Pop","Rock",'R&B'))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
geom_point()+
geom_smooth(method = 'nls')
}
filter_genre(c("Country","Pop","Rock",'R&B'))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
geom_point()+
geom_smooth()
}
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()
geom_smooth()
}
filter_genre(c("Country","Rock"))
filter_genre(c("Country","Rock"))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth()
}
filter_genre(c("Country","Rock"))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth()
}
filter_genre(c("Country","Rock"))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth(method = 'gam')
}
filter_genre(c("Country","Rock"))
# group by genre and year
lyric1 <- filter(dt_lyrics, dt_lyrics$genre != "Not Available") %>%
group_by(genre,year) %>%
summarise(genre_year_count = n())  %>%
inner_join(dt_lyrics,by = c('genre', 'year'))
# compute percentage for each genre in each ear
lyric2 <- lyric1 %>%
group_by(year) %>%
summarise(song_year_total = n())  %>%
inner_join(lyric1) %>%
mutate(genre_perc = genre_year_count/song_year_total) %>%
filter(song_year_total>200 & genre_perc >= 0.05 )
# ggplot(lyric2,aes(x=year,y = genre_perc,col = genre)) +
#   geom_line() +
#   labs(title = 'Proportin of Each Genre Over Time')
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth(method = 'gam')
}
filter_genre(c("Country","Rock"))
filter_genre(c("Country","Rock",'Pop'))
?geom_smooth()
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth(method = 'lm')
}
filter_genre(c("Country","Rock",'Pop',))
filter_genre(c("Country","Rock",'Pop'))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth()
}
filter_genre(c("Country","Rock",'Pop'))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth(method = 'auto')
}
filter_genre(c("Country","Rock",'Pop'))
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
stat_smooth()+
geom_smooth(method = 'lm')
}
filter_genre(c("Country","Rock",'Pop'))
gl <- unique(lyric2$genre)
gl
filter_genre(gl[4]))
filter_genre(gl[4])
filter_genre(gl[4,5,6,7])
filter_genre(gl[c(4,5,6,7)])
filter_genre(gl[c(1,2,3,4,5,6,7)])
filter_genre(gl[c(1,4,5,6,7)])
filter_genre(c("Country","Rock",'Pop','Jazz'))
filter_genre(c("Country","Rock",'Pop','Metal'))
filter_genre(c("Country","Rock",'Pop','R&B'))
gl <- lyric2[lyric2$genre == 'R&B']
gl <- lyric2[lyric2$genre == 'R&B',]
gl
lyric2[lyric2$genre == 'R&B',] %>%
group_by(year) %>%
summarise(n =  n())
lyric2[dt_lyrics$genre == 'R&B',] %>%
group_by(year) %>%
summarise(n =  n())
lyric2[lyric2$genre == 'R&B',] %>%
group_by(year) %>%
summarise(n =  n())
lyric2[dt_lyrics$genre == 'R&B',] %>%
group_by(year) %>%
summarise(n =  n())
dt_lyrics[dt_lyrics$genre == 'R&B',] %>%
group_by(year) %>%
summarise(n =  n())
dt_lyrics %>%
group_by(year) %>%
summarise(n =  n())
filter_genre(c("Country","Rock",'Pop'))
gl <- unique(lyrics2$genre)
gl <- unique(lyric2$genre)
gl
filter_genre(gl[c(1,4,5,6,7)])
gl <- unique(lyric2$genre)
gl
filter_genre(gl[c(1,4,5,6,7)])
filter_genre(c("Country","Rock",'Pop','Jazz'))
filter_genre(c("Country","Rock",'Pop','Jazz','Hip-Hop'))
filter_genre(c("Country","Rock",'Pop','Jazz','Metal'))
filter_genre(c("Rock",'Pop'))
gl <- unique(lyric2$genre)
gl
filter_genre(gl[c(1,4,5,7)])
gl <- unique(lyric2$genre)
gl
filter_genre(gl[c(1,7)])
# Function to Automate Ploting
filter_genre <- function(input){
lyric2 %>%
filter(genre == input) %>%
ggplot(aes(x=year,y = genre_perc,col = genre)) +
geom_point() +
stat_smooth()+
geom_smooth(method = 'lm')
}
gl <- unique(lyric2$genre)
gl
filter_genre(gl[c(1,7)])
filter_genre(gl[c(4,5)])
filter_genre(c("Rock",'Pop'))
str(word_tibble)
lyric2 %>%
group_by(genre) %>%
summarise(n = n())
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange()
?arrange
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange()
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange(n)
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange(n,desc())
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange(desc())
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange(desc(n))
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
desc(n)
lyric2 %>%
group_by(genre) %>%
summarise(n = n()) %>%
arrange(desc(n))
?tidy()
# words cloud fucntion
wdcld <- function(genre_choice,words_choice){
count(filter(word_tibble, id %in% which(dt_lyrics$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud2(size=0.6, rotateRatio=0.2)
}
wdcld(Rock,20)
wdcld('Rock',20)
wdcld('Rock',100)
wdcld('Pop',100)
wdcld('MEtal',100)
wdcld('Metal',100)
wdcld('Pop',100)
wdcld('Pop',200)
count(filter(word_tibble, id %in% which(dt_lyrics$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud2(size=0.8, rotateRatio=0.2)
# words cloud fucntion
wdcld <- function(genre_choice,words_choice){
count(filter(word_tibble, id %in% which(dt_lyrics$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud2(size=0.8, rotateRatio=0.2)
}
wdcld('Pop',200)
wdcld('Pop',200)
DT::datatable(head(lyric2))
wdcld('Pop',200)
DT::datatable(head(lyric2[1:10]))
wdcld('Pop',200)
DT::datatable(head(lyric2[,1:8]))
wdcld('Pop',200)
DT::datatable(head(lyric2[,1:7]))
wdcld('Pop',200)
DT::datatable(head(lyric2[,1:5]))
wdcld('Pop',200)
DT::datatable(head(lyric2[,1:5]))
kabble(head(lyric2[,1:5]))
library(knitr)
kabble(head(lyric2[,1:5]))
library(knitr)
kable(head(lyric2[,1:5]))
datatable(head(lyric2[,1:5]))
count(filter(word_tibble, id %in% which(dt_lyrics$genre == 'Rock')), word, sort = TRUE) %>%
slice(1:10)
class(a)
a<- count(filter(word_tibble, id %in% which(dt_lyrics$genre == 'Rock')), word, sort = TRUE) %>%
slice(1:10)
class(a)
colnames(a)
head(word_tibble)
dt_sub <- filter(dt_lyrics, year>=1970 & year<(1980))
dimdt_sub
dim(dt_sub)
head(dt_sub)
rock1 <- count(filter(word_tibble, id %in% which(rock70$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:20)
rock70 <- filter(dt_lyrics, year>=1970 & year<(1980))
rock1 <- count(filter(word_tibble, id %in% which(rock70$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:20)
dt_lyrics %>% group_by(year) %>% summarise(count = n(),sort = TRUE)
filter_year <- function(start){
if(start != 2010){
filter(dt_lyrics, year>=start & year<=(start+10))
}
else{
filter(dt_lyrics, year>=start )
}
}
rock70 <- filter_year(1970)
rock90 <- filter_year(1990)
rock00 <- filter_year(2000)
rock10 <- filter_year(2010)
filter_count <- function(genre_choice,year){
count(filter(word_tibble, id %in% which(filter_year(year)$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:20)
}
rock70 <- filter_count(1970)
rock70 <- filter_count('Rock',1970)
head(rock70)
rock70
dim(rock70)
dorck70
rock7o
rock70
rock90 <- filter_year('Rock',1990)
rock70 <- filter_count('Rock',1970)
rock90 <- filter_count('Rock',1990)
rock00 <- filter_count('Rock',2000)
rock00 <- filter_count('Rock',2000)
rock10 <- filter_count('Rock',2010)
rock10
rock10
aa <- cbind(rock00,rock10)
aa
aa <- cbind(rock00[,1],rock10[,1])
aa
aa <- cbind(rock00[,1],rock10[,1],rock90[,1],rock70[,1])
aa
aa <- cbind(rock70[,1],rock90[,1],rock00[,1],rock10[,1])
aa
colnames(aa) = c('1970s','1990s','2000s','2010')
aa
wdcld('Rock',30,1970)
wdcld('Rock',30,1970)
# words cloud fucntion
wdcld <- function(genre_choice,words_choice,years){
count(filter(word_tibble, id %in% which(filter_year(years)$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud2(size=0.8, rotateRatio=0.2)
}
wdcld('Rock',30,1970)
wdcld('Rock',30,2010)
?kable
wdcld('Rock',30, 2010)
wdcld('Rock',30,1970)
wdcld('Rock',30,1970)
wdcld('Rock',30,1970)
pop7 <- filter_count('Pop',1970)
pop9 <- filter_count('Pop',1990)
pop0 <- filter_count('Pop',2000)
pop1 <- filter_count('Pop',2010)
bb <- cbind(pop7[,1],pop9[,1],pop0[,1],pop1[,1])
colnames(bb) = c('1970s','1990s','2000s','2010')
kable(bb,caption = 'Top word choice for different decades')
a <- intersect(pop7,pop1)
a
a <- intersect(pop7,pop0)
a
a <- common(pop7,pop0)
a
a <- inttersect(pop7[,1],pop0[,1])
a <- intersect(pop7[,1],pop0[,1])
a
pop0[-pop0[,1] %in% a, ]
pop0[pop0[,1] %in% a, ]
pop0[pop0[,1] %in% a ]
pop0[pop0[,1] %in% a ]
pop0[pop0[,1] %in% a ]
pop0[pop0[,1]!=a, ]
kable(bb,caption = 'Top word choice for different decades')
a
bb
wdcld('Pop',30,1970)
wdcld('Pop',30,1970)
wdcld('Pop',30,2010)
wdcld('Rock',30,1970)
wdcld('Rock',30,2010)
# words cloud fucntion
wdcld <- function(genre_choice,words_choice,years){
count(filter(word_tibble, id %in% which(filter_year(years)$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud(size=0.8, rotateRatio=0.2)
}
wdcld('Rock',30,2010)
# words cloud fucntion
wdcld <- function(genre_choice,words_choice,years){
count(filter(word_tibble, id %in% which(filter_year(years)$genre == genre_choice)), word, sort = TRUE) %>%
slice(1:words_choice) %>%
wordcloud2(size=0.8, rotateRatio=0.2)
}
wdcld('Rock',30,2010)
metal7 <- filter_count('Metal',1970)
metal9 <- filter_count('Metal',1990)
metal0 <- filter_count('Metal',2000)
metal1 <- filter_count('Metal',2010)
cc <- cbind(metal7[,1],metal9[,1],metal0[,1],metal1[,1])
dim(metal0)
dim(metal1)
dim(metal7)
dt_lyrics %>%
filter(genre == 'Metal') %>%
group_by(year)
dt_lyrics %>%
filter(genre == 'Metal') %>%
group_by(year) %>%
summarise(n = n()) %>%
arrange(desc(year))
metal9 <- filter_count('Metal',1990)
metal0 <- filter_count('Metal',2000)
metal1 <- filter_count('Metal',2010)
cc <- cbind(metal9[,1],metal0[,1],metal1[,1])
colnames(cc) = c('1990s','2000s','2010')
kable(cc,caption = 'Top word choice for different decades')
cc
wdcld('Metal',30,1980)
wdcld('Metal',30,2010)
knitr::opts_chunk$set(echo = TRUE)
dim(dt_lyrics)
df = dt_lyrics %>%
filter(year>1980 & year <1990)
dim(df)
datatable(bb)
library(ggplot2)
x_val = c(1:20)
var= 0.01*x_val^2.2
sq_bias = 10*x_val^(-1)
train_err = 11*x_val^-0.5
test_err = (x_val^2)/20-x_val+12
bay_err = 6.8
my_data = data.frame(x_val,var,sq_bias,train_err,test_err,bay_err)
ggplot(my_data, aes(x=x_val)) + geom_line(aes(y=sq_bias,col='squared bias')) + geom_line(aes(y=var,col='variance')) + geom_line(aes(y=train_err,col='train error')) + geom_line(aes(y=test_err,col='test error')) + geom_line(aes(y=bay_err,col='bayes error')) + xlab('Flexibility') + ylab('Values')
ggplot(my_data, aes(x=x_val)) + geom_line(aes(y=train_err,col='train error (before)')) + geom_line(aes(y=train_err*2,col='train error (after)')) + xlab('Flexibility') + ylab('Values')
result = cal_est(Auto$weight, Auto$horsepower)
library(ISLR)
library(ggplot2)
data = Auto
ggplot(data) + geom_point(aes(x=weight, y=horsepower))
cal_est = function(x,y) {
x_mean = mean(x)
y_mean = mean(y)
beta1 = sum((x-x_mean)*(y-y_mean))/sum((x-x_mean)^2)
beta0 = y_mean - beta1*x_mean
return(c(beta0, beta1))
}
## return a vector with beta0 and beta1
result = cal_est(Auto$weight, Auto$horsepower)
result
shiny::runApp('ads_project2')
runApp('ads_project2')
runApp('ads_project2')
runApp('ads_project2')
runApp('ads_project2')
runApp('ads_project2')
runApp('ads_project2')
library(ggmap)
getwd()
setwd('~/Documents/Github')
getwd()
df <- read.csv('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/data/2016_ems.xlsx')
df <- readxl('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/data/2016_ems.xlsx')
df <- readxl::read_xlsx('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/data/2016_ems.xlsx')
head(df)
runApp('~/Desktop')
install.packages("choroplethr")
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('fall2019-proj2--sec2-grp11/app')
getwd()
a <- readRDS('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
a <- load('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
a <- load('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
str(a)
a <- load('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
a
str(a)
options(pkgType = "source")
a <- readRDS('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
options(pkgType = "source")
a <- readRDS('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
a <- load('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/ems_coord_zip.rds')
a
head(a)
a <- load('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/hs_coord_zip.rds')
head(a)
a <- readRDS('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/hs_coord_zip.rds')
getwd()
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
setView(-73.983,40.7639,zoom = 12) %>%
})
runApp('fall2019-proj2--sec2-grp11/app')
runApp('~/Desktop')
m
runApp('fall2019-proj2--sec2-grp11/app')
runApp('~/Desktop')
runApp('fall2019-proj2--sec2-grp11/app')
runApp('~/Desktop')
runApp('~/Desktop')
library(leaflet)
library(leaflet)
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)) %>%
setView(-73.983,40.7639,zoom = 12)
runApp('~/Desktop')
runApp('fall2019-proj2--sec2-grp11/app')
runApp('fall2019-proj2--sec2-grp11/app')
runApp('fall2019-proj2--sec2-grp11/app')
runApp('fall2019-proj2--sec2-grp11/app')
shiny::runApp()
str(zipcode)
str(zipcode)
zipcode <- read.csv('/Users/marshall/Documents/GitHub/fall2019-proj2--sec2-grp11/output/hs_coord_zip.csv')
str(zipcode)
runApp()
runApp()
